#!/usr/bin/env python

import os, sys, optparse, shutil
import glob
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.patches as patches
from datetime import datetime
from time import strptime

import astropy.table
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import EarthLocation
from astropy.coordinates import Angle
from astropy.table import Table, vstack
from astropy.time import Time, TimeDelta
from astropy.io import fits
from astropy.io import ascii

from astroplan import Observer
from astroplan import FixedTarget
from astroplan import ObservingBlock
from astroplan.constraints import TimeConstraint
from astroplan.constraints import AtNightConstraint, AirmassConstraint, MoonSeparationConstraint
from astroplan.scheduling import Transitioner
from astroplan.scheduling import SequentialScheduler
from astroplan.scheduling import PriorityScheduler
from astroplan.scheduling import Schedule
from astroplan.plots import plot_schedule_airmass
from astroplan import observability_table

from kp84.scheduler import load_targets, load_observations

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-f","--outfile",default="/home/kped/Software/Queue/Michael_queue/queue_target.dat")
    parser.add_option("-l","--object_lists",default="/home/kped/KP84/object_lists")

    parser.add_option("-r","--requests",default="/home/kped/Software/Queue/Michael_queue/requests/")
    parser.add_option("-b","--observations",default="/home/kped/Software/Queue/Michael_queue/observations/")
    
    parser.add_option("-o","--outputDir",default="/home/kped/Software/Queue/Michael_queue/output_observing")
    parser.add_option("-s","--tstart",default="2019-08-27 03:30")
    parser.add_option("-e","--tend",default="2019-08-27 15:30")

    parser.add_option("-c","--significance_cut",default=0.0,type=float)

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doTime",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()
object_lists = opts.object_lists
outfile = opts.outfile

outputDir = opts.outputDir
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

location = EarthLocation.from_geodetic(-111.5967*u.deg, 31.9583*u.deg,
                                       2096*u.m)
kp = Observer(location=location, name="Kitt Peak",timezone="US/Arizona")

if opts.doTime:
    tstart = Time(opts.tstart)
    tend = Time(opts.tend)
else:
    tstart = Time.now()
    tend = Time.now() + TimeDelta(12*u.hour)

global_constraints = [AirmassConstraint(max = 2.00, boolean_constraint = False),
    AtNightConstraint.twilight_civil(), MoonSeparationConstraint(min = 10.0*u.deg)]

targets = load_targets(opts.object_lists)

observations = {}

filenames = glob.glob(os.path.join(opts.requests, '*'))
if len(filenames) > 0:
    objs, gpss = [], []
    for filename in filenames:
        filenameSplit = filename.split("/")[-1].split("_")
        objs.append(filenameSplit[0])
        if len(filenameSplit) == 3:
            gpss.append(float(filenameSplit[2].replace(".dat","")))
        else:
            gpss.append(float(filenameSplit[1].replace(".dat","")))
    idx = np.argmax(gpss)
    object_id = objs[idx]
    currentgps = gpss[idx]
    dateobs = Time(currentgps, format='gps').iso
    
    if not object_id in observations:
        observations[object_id] = []
    observations[object_id].append(dateobs)

filenames = glob.glob(os.path.join(opts.observations, '*'))
for filename in filenames:
    data = load_observations(filename)
    if data["SUCCESS"] == "0":
        object_id, dateobs = data["OBJECT_ID"], data["DATEOBS"]
        if not object_id in observations:
            observations[object_id] = []
        observations[object_id].append(dateobs)

targets.sort("priority")
targets = targets[::-1]

priorities = np.arange(1,len(targets)+1)

blocks = []
read_out = 10.0 * u.s
nexp = 1
for ii, target in enumerate(targets):
    #if target["target"].name in observations:
    #    print("%s already observed..." % target["target"].name)
    if not target["redo"]:
        if target["target"].name in observations:
            #print('Not redoing %s' % target["target"].name)
            continue
    else:
        if target["target"].name in observations:
            redo = True
            obs = observations[target["target"].name]
            for ob in obs:
                dt = tstart.gps - Time(ob, format='iso').gps
                if target["delta_redo"]*86400 > dt:
                    redo = False
                    break
            if not redo:
                #print('Not redoing %s' % target["target"].name)
                continue

    if ii < 50:
        print(target["target"].name, priorities[ii])

    bandpass = target["filter"]
    exposure_time = int(target["exposure_time"]) * u.s
    priority = priorities[ii]
    #priority = target["priority"]

    b = ObservingBlock.from_exposures(target["target"],priority,
                                      exposure_time, nexp, read_out,
                                      configuration = {'filter': bandpass})
    blocks.append(b)

# Initialize a transitioner object with the slew rate and/or the
# duration of other transitions (e.g. filter changes)
slew_rate = 2.0*u.deg/u.second
transitioner = Transitioner(slew_rate,
                            {'filter':{'default': 10*u.second}})

# Initialize the sequential scheduler with the constraints and transitioner
prior_scheduler = PriorityScheduler(constraints = global_constraints,
                                    observer = kp,
                                    transitioner = transitioner)
# Initialize a Schedule object, to contain the new schedule
priority_schedule = Schedule(tstart, tend)

# Call the schedule with the observing blocks and schedule to schedule the blocks
prior_scheduler(blocks, priority_schedule)

cnt = 0 

try:
    tab = priority_schedule.to_table(show_transitions=False, show_unused=False)
except:
    print('There are probably no observable targets... please check.')
    exit(2)

fid = open(outfile,'w')
for schedule in tab:
    tar = schedule["target"]
    if tar == "TransitionBlock": continue
    #print(targets["objectID"])

    if (not opts.doTime) and (cnt > 0):
        continue

    idx = np.where(targets["objectID"] == tar)[0]
    target = targets[idx]
    filt = schedule["configuration"]["filter"]
    obsstart, obsend = Time(schedule["start time (UTC)"]), Time(schedule["end time (UTC)"])

    expt = int(schedule["duration (minutes)"]*60.0)

    c = SkyCoord(ra=target["ra"][0]*u.degree, dec=target["dec"][0]*u.degree,
                 frame='icrs')
    ra = c.ra.to_string(unit=u.hour, sep=':')
    dec = c.dec.to_string(unit=u.degree, sep=':')

    nt = Time.now()
    gps = nt.gps
    requestID = "%s_%d" % (target["objectID"][0],gps)

    if not opts.doTime:
        print('PROGRAM_PI=%s' % target["pi"][0],file=fid,flush=True)
        print('PROGRAM_ID=%s' % target["programID"][0],file=fid,flush=True)
        print('OBJECT_ID=%s' % target["objectID"][0],file=fid,flush=True)
        print('REQUEST_ID=%s' % requestID,file=fid,flush=True)
        print('COMMENT=%s' % target["comment"][0],file=fid,flush=True)
        print('OBJ_RA=%s' % target["ra_hex"][0],file=fid,flush=True)
        print('OBJ_DEC=%s' % target["dec_hex"][0],file=fid,flush=True)
        print('EQUINOX=%.2f' % target["epoch"][0],file=fid,flush=True)
        print('RA_RATE=%.2f' % target["ra_rate"][0],file=fid,flush=True)
        print('DEC_RATE=%.2f' % target["dec_rate"][0],file=fid,flush=True)
        print('MAGNITUDE=%.2f' % target["mag"][0],file=fid,flush=True)
        print('EXPTIME=%d' % target["exposure_time"][0],file=fid,flush=True)
        print('FILTER=%s' % target["filter"][0],file=fid,flush=True)
        print('CAMERA_MODE=%d' % target["mode"][0],file=fid,flush=True)

        print('PROGRAM_PI=%s' % target["pi"][0])
        print('PROGRAM_ID=%s' % target["programID"][0])
        print('OBJECT_ID=%s' % target["objectID"][0])
        print('REQUEST_ID=%s' % requestID)
        print('COMMENT=%s' % target["comment"][0])
        print('OBJ_RA=%s' % target["ra_hex"][0])
        print('OBJ_DEC=%s' % target["dec_hex"][0])
        print('EQUINOX=%.2f' % target["epoch"][0])
        print('RA_RATE=%.2f' % target["ra_rate"][0])
        print('DEC_RATE=%.2f' % target["dec_rate"][0])
        print('MAGNITUDE=%.2f' % target["mag"][0])
        print('EXPTIME=%d' % target["exposure_time"][0])
        print('FILTER=%s' % target["filter"][0])
        print('CAMERA_MODE=%d' % target["mode"][0])

    else:
        print('%s,%d,%s,%s,%s,%.1f,%.2f,%.2f,%.2f,%.0f,%s,%d,%s,%s'%(requestID, target["programID"][0], target["objectID"][0], target["ra_hex"][0], target["dec_hex"][0], target["epoch"][0], target["ra_rate"][0], target["dec_rate"][0], target["mag"][0], target["exposure_time"][0], target["filter"][0], target["mode"][0], target["pi"][0], target["comment"][0]),file=fid,flush=True)

    cnt = cnt + 1

fid.close()

if cnt == 0:
    print('No observations scheduled... sorry.')
    exit(0)

if not opts.doTime:
    cp_command = "cp %s %s/%s.dat" % (outfile, opts.requests, requestID)
    os.system(cp_command) 

if opts.doPlots:
    # plot the schedule with the airmass of the targets
    plt.figure(figsize = (28,6))
    plot_schedule_airmass(priority_schedule,show_night=True)
    plt.legend(loc = "upper right")
    #plt.show()
    plt.savefig(os.path.join(outputDir,'scheduler.png'))
    plt.close()

